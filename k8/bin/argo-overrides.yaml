apiVersion: v1
kind: ConfigMap
metadata:
  name: workflow-controller-configmap
data:
  config: |
    artifactRepository:
      archiveLogs: true
      s3:
        endpoint: s3.amazonaws.com
        bucket: ${SET BUCKET HERE} 
        region: us-west-2
        keyFormat: "artifacts\
          /{{workflow.creationTimestamp.Y}}\
          /{{workflow.creationTimestamp.m}}\
          /{{workflow.creationTimestamp.d}}\
          /{{workflow.name}}\
          /{{pod.name}}"
    # containerRuntimeExecutor: k8sapi
    containerRuntimeExecutor: docker
    dockerSockPath: /var/run/docker.sock
    persistence:
      connectionPool:
        maxIdleConns: 100
        maxOpenConns: 0
      #  if true node status is only saved to the persistence DB to avoid the 1MB limit in etcd
      nodeStatusOffLoad: false
      # save completed workloads to the workflow archive
      archive: true
      # # Optional name of the cluster I'm running in. This must be unique for your cluster.
      # clusterName: default
      postgresql:
        host: ${RDS_ENDPOINT}
        port: 5432
        database: argo
        tableName: argo_workflows
        # the database secrets must be in the same namespace of the controller
        userNameSecret:
          name: argo-server
          key: rds.user
        passwordSecret:
          name: argo-server
          key: rds.password
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: workflow-controller
spec:
  selector:
    matchLabels:
      app: workflow-controller
  template:
    metadata:
      labels:
        app: workflow-controller
    spec:
      containers:
      - args:
        - --configmap
        - workflow-controller-configmap
        - --executor-image
        - argoproj/argoexec:${ARGO_VERSION}
        command:
        - workflow-controller
        image: argoproj/workflow-controller:${ARGO_VERSION}
        livenessProbe:
          httpGet:
            path: /metrics
            port: metrics
          initialDelaySeconds: 30
          periodSeconds: 30
        name: workflow-controller
        ports:
        - containerPort: 9090
          name: metrics
      nodeSelector:
        kubernetes.io/os: linux
      securityContext:
        runAsNonRoot: true
      serviceAccountName: argo
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argo-server
spec:
  selector:
    matchLabels:
      app: argo-server
  template:
    metadata:
      labels:
        app: argo-server
      annotations:
        iam.amazonaws.com/role: ds-argo
    spec:
      containers:
      - args:
        - server
        image: argoproj/argocli:${ARGO_VERSION}
        name: argo-server
        ports:
        - containerPort: 2746
          name: web
        readinessProbe:
          httpGet:
            path: /
            port: 2746
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 20
        volumeMounts:
        - mountPath: /tmp
          name: tmp
      nodeSelector:
        kubernetes.io/os: linux
      securityContext: 
        fsGroup: 65534
      serviceAccountName: argo-server
      volumes:
      - emptyDir: {}
        name: tmp
---
apiVersion: v1
kind: Service
metadata:
  name: argo-server
spec:
  selector:
    app: argo-server
  ports:
    - port: 80
      targetPort: 2746
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argo-workflows
  annotations:
    eks.amazonaws.com/role-arn: ${ROLE_ARN}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argo-server
  # annotations:
  #   eks.amazonaws.com/role-arn: ${ROLE_ARN}
